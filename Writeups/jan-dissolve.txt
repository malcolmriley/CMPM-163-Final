When I was making the dissolve effect, I tried to do something different by using a new feature in Unity known as the shader graph. This allowed me to better organize and see my shader at a higher level.
In order to use the shader graph feature, I needed to import both the Shader Graph and the Lightweight Render Pipeline packages in Unity. I would then edit the render pipeline and upgrade the project materials to LightweightRP materials. Lastly I would create a new material based on the lightweight render pipeline to replace the standard materials.
Using the shader graph, I created a simple noise to simulate the effects I want for dissolving an object. To create edges on the noise, I also added a step node that also takes from the simple noise and added a color to it.
On the master node in the shader graph, I assigned the noise as the object's Alpha and assigned the edge effect created by the step node as the object's Emission.
When I initially created the shader effect, it was made to dissolve in and out repeatedly by remapping the vector using the time node. But what I wanted in the project was to make it so that the house dissolves upon interaction and only once. In order to do this, I needed to create a script to control the properties of the shader.
In the shader graph, there is a blackboard that allows me to create vector nodes with exposed parameters. I then used it as an extension to some of the nodes in the graph for me to control through the script. I replaced the sine time that I was using to loop the noise effect in and out in exchange for a vector with an exposed parameter that I can control.
[Insert Image]
To blackboard to the top left is what allows me to expose the parameters.
Within the script, I made it so that upon interaction or mouse click, the house would dissolve only once. To do this, I used a smooth delta time to control the speed in which the house dissolves and since it doesn't bounce back, it would not loop back to its original form.
The use of time is very important when dealing with noise because the way the Alpha Clip Threshold reads noise is that it takes a value between 0 to 1 and decides whether the object is transparent or not. By using the time to transition from 0 to 1, we can create an effect that gradually makes parts of the object transparent.
The end result is a house desolving upon interaction.